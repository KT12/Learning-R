1.13(1/150)
1.13^(1/150)
# URL to AC survey data
acs_url <- "http://s3.amazonaws.com/assets.datacamp.com/production/course_835/datasets/ac_survey.RData"
# Import data in .RData file at acs_url
ac_survey <- load(url(acs_url))
# Print head of ac_survey
print(head(ac_survey))
str(ac_survey)
acs_url <- "http://s3.amazonaws.com/assets.datacamp.com/production/course_835/datasets/ac_survey.RData"
str(ac_url)
str(acs_url)
ac_survey <- load(url(acs_url))
str(ac_survey)
type(ac_survey)
load(url(acs_url))
View(ac_survey)
View(ac_survey)
View(ac_survey)
help("read.csv")
install.packages('RMySQL')
library(ggplot2)
library(RMySQL)
library(pitchRx)
mydb <- dbConnect(MySQL(),user='KT12',password='Softbank9984',dbname='baseball',host='localhost',port='3307')
mydb <- dbConnect(MySQL(),user='KT12',password='Softbank9984',dbname='baseball',host='localhost',port=3307)
scrape(start='2015-06-01',end='2015-06-30',suffix='inning/inning_hit.xml',connect=mydb)
scrape(start='2015-06-01',end='2015-06-30',suffix='players.xml',connect=mydb)
bdat <- dbGetQuery(mydb,'SELECT x,y,des FROM hip WHERE batter=120074')
head(bdat)
unique(bdat$des)
temp <- badt$des
temp <- bdat$des
# Create vectors of indices where batted ball outcomes were hits
single <- which(temp=='Single')
double <- which(temp=='Double')
triple <- which(temp=='Triple')
homerun <- which(temp='Home Run')
# Combine hit vectors into a hit index
indices <- c(single, double, triple, homerun)
# Assign 'no hit' to batted balls not in the hit index
temp[-indices] <- 'No hit'
# Create vectors of indices where batted ball outcomes were hits
single <- which(temp=='Single')
double <- which(temp=='Double')
triple <- which(temp=='Triple')
homerun <- which(temp=='Home Run')
# Combine hit vectors into a hit index
indices <- c(single, double, triple, homerun)
# Assign 'no hit' to batted balls not in the hit index
temp[-indices] <- 'No hit'
temp
bdat$des2 <- temp
bdat
ggplot() +
geom_point(data=bdat, aes(x=x,y=y))
ggplot() +
geom_point(data=bdat, aes(x=x,y=y)) +
coord_equal() + # x and y axes have same length
scale_x_continuous() +
scale_y_continuous()
ggplot() +
geom_point(data=bdat, aes(x=x,y=y)) +
coord_equal() + # x and y axes have same length
scale_x_continuous(breaks=NULL, name='') +
scale_y_continuous(breaks=NULL, name='')
ggplot() +
geom_point(data=bdat, aes(x=x,y=y, color=des2, size=des2, shape=des2)) +
coord_equal() + # x and y axes have same length
# clear axes since x,y location measurements vary by park
scale_x_continuous(breaks=NULL, name='') +
scale_y_continuous(breaks=NULL, name='')
ggplot() +
geom_point(data=bdat, aes(x=x,y=y, color=des2, size=des2, shape=des2)) +
coord_equal() + # x and y axes have same length
# clear axes since x,y location measurements vary by park
scale_x_continuous(breaks=NULL, name='') +
scale_y_reverse(breaks=NULL, name='')
bdat$des2 <- factor(bdat$des2, levels=c('No hit', 'Single', 'Double', 'Home Run'))
ggplot() +
geom_point(data=bdat, aes(x=x,y=y, color=des2, size=des2, shape=des2)) +
coord_equal() + # x and y axes have same length
# clear axes since x,y location measurements vary by park
scale_x_continuous(breaks=NULL, name='') +
scale_y_reverse(breaks=NULL, name='')
ggplot() +
geom_point(data=bdat, aes(x=x,y=y, color=des2, size=des2, shape=des2)) +
coord_equal() + # x and y axes have same length
# clear axes since x,y location measurements vary by park
scale_x_continuous(breaks=NULL, name='') +
scale_y_reverse(breaks=NULL, name='') +
scale_size_manual(values=c(2,4,6,10))
ggplot() +
geom_point(data=bdat, aes(x=x,y=y, color=des2, size=des2, shape=des2)) +
coord_equal() + # x and y axes have same length
# clear axes since x,y location measurements vary by park
scale_x_continuous(breaks=NULL, name='') +
scale_y_reverse(breaks=NULL, name='') +
scale_size_manual(values=c(1,4,6,9))
ggplot() +
geom_point(data=bdat, aes(x=x,y=y, color=des2, size=des2, shape=des2)) +
coord_equal() + # x and y axes have same length
# clear axes since x,y location measurements vary by park
scale_x_continuous(breaks=NULL, name='') +
scale_y_reverse(breaks=NULL, name='') +
# set sizes for display
scale_size_manual(values=c(1,4,6,9)) +
scale_color_manual(values=c('red','green','blue','purple'))
mydb <- dbConnect(MySQL(),user='KT12', password='Softbank9984',dbname='baseball',host='
mydb <- dbConnect(MySQL(),user='KT12', password='Softbank9984',dbname='baseball',host='localhost',port=3307)
scrape(start='2014-03-22',end='2014-09-28',suffix='inning/inning_hit.xml',connect=mydb)
bdat <- dbGetQuery(mydb, 'select x, y, des from hip where batter=120074')
str(bdat)
temp <- bdat$des
# Create vectors of indices where batted ball outcomes were hits
single <- which(temp=='Single')
double <- which(temp=='Double')
triple <- which(temp=='Triple')
homerun <- which(temp=='Home Run')
# Combine hit vectors into a hit index
indices <- c(single, double, triple, homerun)
# Assign 'no hit' to batted balls not in the hit index
temp[-indices] <- 'No hit'
# Assign temp to bdat dataframe
bdat$des2 <- temp
# Turn des2 into factor
# This will allow for easier labelling in ggplot
bdat$des2 <- factor(bdat$des2, levels=c('No hit', 'Single', 'Double', 'Home Run'))
unique(bdat$des2)
unique(bdat$des)
ggplot() +
geom_point(data=bdat, aes(x=x,y=y, color=des2, size=des2, shape=des2)) +
coord_equal() + # x and y axes have same length
# clear axes since x,y location measurements vary by park
scale_x_continuous(breaks=NULL, name='') +
scale_y_reverse(breaks=NULL, name='') +
# set sizes for display
scale_size_manual(values=c(1,4,6,9)) +
scale_color_manual(values=c('red','green','blue','purple'))
install.packages('Shiny')
install.packages('shiny')
library(shiny)
setwd()
setwd('C:\R')
# Looking at Titanic data through R
# File in C:/R/Titanic.csv
# Import dplyr package
library(dplyr)
# Change working directory
setwd('C:/R')
# Save dataframe from CSV
Titanic <- read.csv('Titanic.csv')
head(Titanic)
Data <- Titanic %>%
group_by(sex) %>%
summarize(percent_surviving=mean(survived))
Data
